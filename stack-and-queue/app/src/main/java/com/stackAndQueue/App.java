/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.stackAndQueue;


import com.stackAndQueue.queue.structure.*;
import com.stackAndQueue.stack.structure.Stack;
import com.stackAndQueue.tree.data.BTNode;
import com.stackAndQueue.tree.structure.BinarySearchTree;
import com.stackAndQueue.tree.structure.BinaryTree;

public class App {


    public static void main(String[] args) {
//        Stack<Integer> stack = new Stack<>();
//        stack.push(5);
//        stack.push(2);
//        stack.push(3);
//        System.out.println(stack.getMax());
//        stack.pop();
//        System.out.println(stack);
//        System.out.println(stack.peek());

//        PseudoQueue<Integer> queue  = new PseudoQueue<>();
//        queue.enqueue(1);
//        queue.enqueue(2);
//        System.out.println(queue.enqueue(3));
//        System.out.println(queue.enqueue(4));
//        System.out.println(queue.enqueue(6));
//        System.out.println(queue.dequeue());
//        System.out.println(queue.enqueue(7));
//        System.out.println(queue.dequeue());


//        System.out.println(queue);
//        queue.dequeue();
//        System.out.println(queue.peek());

//        Animal cat = new Cat("cat");
//        Animal dog = new Dog("dog");
//
//        AnimalShelter<Animal> animalShelter = new AnimalShelter<>();
//        System.out.println(animalShelter.enqueue(dog));
//        System.out.println(animalShelter.enqueue(cat));
//        System.out.println(animalShelter.dequeue("dog"));

//        System.out.println(validateBrackets("[}"));


// Binary tree
        BinaryTree<String> binaryTree = new BinaryTree<>();
        binaryTree.setRoot(new BTNode<>("h"));
        // level 1
        binaryTree.getRoot().setLeft(new BTNode<>("h"));
        binaryTree.getRoot().setRight(new BTNode<>("a"));

        // level 2
        binaryTree.getRoot().getLeft().setLeft(new BTNode<>("m"));
        binaryTree.getRoot().getRight().setLeft(new BTNode<>("z"));
//        binaryTree.levelOrderTraversalLoop();
        System.out.println("\n");
        System.out.println("POSTORDER \n" + binaryTree.traverse(  BinaryTree.TraversalOrder.POSTORDER));
        System.out.println("INORDER");
        System.out.println(binaryTree.traverse(BinaryTree.TraversalOrder.INORDER));;
        System.out.println("PREORDER");
        System.out.println(binaryTree.traverse(BinaryTree.TraversalOrder.PREORDER));;
        System.out.println("\n\nBinary search tree");

// Binary search tree
        BinarySearchTree<Integer> binarySearchTree= new BinarySearchTree<>();
        binarySearchTree.add(100);
        binarySearchTree.add(200);
        binarySearchTree.add(80);
        binarySearchTree.add(70);
        binarySearchTree.add(90);
        binarySearchTree.traverse(BinarySearchTree.TraversalOrder.INORDER);
        System.out.println(binarySearchTree.contains(90));


    }

    public static boolean validateBrackets(String input_str) {

        Stack<Character> stack = new Stack<Character>();
        for (char charecter : input_str.toCharArray()) {
            if (charecter == '(' || charecter == '{' || charecter == '[') {
                stack.push(charecter);
            } else {
                if(!stack.empty()) {
                    char top = (Character) stack.peek();
                    if(charecter == ')' && top == '(' ||
                            charecter == '}' && top == '{' ||
                            charecter == ']' && top == '['){
                        stack.pop();
                    }
                }else if(charecter == ')' || charecter == '}' || charecter == ']') return false;
            }
        }
        return stack.empty();
    }
}
