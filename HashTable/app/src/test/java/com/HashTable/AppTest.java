/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.HashTable;

import com.HashTable.structure.HashMap;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import static com.HashTable.App.leftJoin;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void getKeyValue(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("hamzh" , "java developer");
        String val = hashMap.print("hamzh");
        String exp = "{ hamzh=>java developer } -> { NULL }";
        assertEquals(val , exp);
    }

    @Test
    public void getValue(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("hamzh" , "java developer");
        String val = hashMap.get("hamzh");
        String exp = "java developer";
        assertEquals(val , exp);
    }

    @Test
    public void getValueNull(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("hamzh" , "java developer");
        String val = hashMap.get("ahmad");
        assertNull(val);
    }

    @Test
    public void getAllKeys(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("hamzh" , "java developer");
        hashMap.put("hamzh" , "java develop");
        hashMap.put("ahmad" , "java developer");
        hashMap.put("mohammed" , "java developer");
        hashMap.put("Ibrahem" , "java developer");
        hashMap.put("JAVA" , "hello evry one");
        hashMap.put("Amman" , "hello evry one" );
        HashSet<String> hashSet = hashMap.keys();
        String exp = "[JAVA, hamzh, Amman, Ibrahem, ahmad, mohammed]";

        assertEquals(hashSet.toString() , exp);
    }

    @Test
    public void handleCollision(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("Ibrahem" , "java developer");
        hashMap.put("JAVA" , "hello evry one");
        hashMap.put("Amman" , "hello evry one" );
        String val = hashMap.print("Ibrahem");
        String exp = "{ Ibrahem=>java developer } -> { Amman=>hello evry one } -> { JAVA=>hello evry one } -> { NULL }";

        assertEquals(val , exp);
    }

    @Test
    public void getCollisionValue(){
        HashMap<String , String> hashMap = new HashMap<>();
        hashMap.put("Ibrahem" , "java developer");
        hashMap.put("JAVA" , "hello evrey one this is java");
        hashMap.put("Amman" , "hello evry one" );
        String val = hashMap.get("JAVA");
        String exp = "hello evrey one this is java";
        assertEquals(val , exp);
    }

    @Test
    public void inRangeValue(){
        HashMap<String , String> hashMap = new HashMap<>();
        String[] number = new String[]{"hamzh" , "ahmad" , "mahmood" , "ali" , "mahmood"} ;


        boolean value = true ;
        for (int i = 0; i < hashMap.getSize(); i++) {
           int indexNumber = hashMap.getHashed(number[i]);
           if (!(indexNumber < hashMap.getBuckets())){
               value = false;
           }
        }
        assertTrue(value);
    }

    @Test
//    public void testRepeatedWord(){
//        String str = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way â€“ in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
//        String val = App.repeatedWord(str);
//        String exp  = "it" ;
//        assertEquals(exp , val);
//    }



    // Code challange 33
//    @Test
//    public void leftJoinTest(){
//        HashMap<String , String> hashMap = new HashMap<>();
//        hashMap.put("diligent" , "employed");
//        hashMap.put("outfit" , "garb");
//
//
//        HashMap<String , String> hashMap2 = new HashMap<>();
//        hashMap2.put("diligent" , "idle");
//        hashMap2.put("flow" , "jam");
//
//        List<List<String>> list = leftJoin(hashMap , hashMap2);
//
//        List<List<String>> exp = new ArrayList<>();
//
//        List<String> arr1 = new ArrayList<>();
//        arr1.add("diligent");
//        arr1.add("employed");
//        arr1.add("idle");
//
//        List<String> arr2 = new ArrayList<>();
//        arr2.add("outfit");
//        arr2.add("garb");
//        arr2.add(null);
//
//        exp.add(arr1);
//        exp.add(arr2);
//
//
//        assertEquals(exp.toString() , list.toString());
//
//
//
//    }

}
