/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.treeIntersection;

import com.treeIntersection.data.HashNode;
import com.treeIntersection.data.Node;
import com.treeIntersection.structure.HashMap;
import com.treeIntersection.structure.TreeIntersection;

public class App {


    private static HashMap<Integer, Integer> hashMap;

    public static void main(String[] args) {
        TreeIntersection<Integer> treeIntersection1 = new TreeIntersection<>();
        hashMap = new HashMap<>();
        treeIntersection1.add(15);
        treeIntersection1.add(20);
        treeIntersection1.add(3);
        treeIntersection1.add(4);
        treeIntersection1.add(5);


        TreeIntersection<Integer> treeIntersection2 = new TreeIntersection<>();
        treeIntersection2.add(15);
        treeIntersection2.add(20);
        treeIntersection2.add(7);
        treeIntersection2.add(9);
        treeIntersection2.add(8);

        treeIntersection(treeIntersection1 , treeIntersection2);

    }



    public static void treeIntersection(TreeIntersection<Integer> treeIntersection1 , TreeIntersection<Integer> treeIntersection2 ){
        Node<Integer>  root1 =   treeIntersection1.getRoot();
        Node<Integer>  root2 =   treeIntersection2.getRoot();
        // Add binary tree 1 to hash map
        hashMap = new HashMap<>();

        inOrder(root1 ,root2);

        System.out.println("hi");



    }

    private static void inOrder(Node<Integer> treeNode , Node<Integer> treeNode2) {

        if (treeNode == null || treeNode2 == null) { // base case
            return;
        }
        inOrder(treeNode.getLeftNode() , treeNode2.getLeftNode()); // left
        if (treeNode.getData()== treeNode2.getData()){
            hashMap.set(treeNode.getData() , treeNode.getData());
        }

        inOrder(treeNode.getRightNode(), treeNode2.getRightNode()); // right
    }

    public static HashMap<Integer , Integer> getHashMap(){
        return hashMap ;
    }


}
